import streamlit as st
# import yfinance as yf
import plotly.graph_objects as go
import pandas as pd
from datetime import datetime, timedelta
import model as m
from google.cloud import dialogflow_v2 as dialogflow
import uuid
# ... ƒë·∫ßu file app.py ...
import os
import json # Th√™m import n√†y
from dotenv import load_dotenv

load_dotenv()  # t·ª± ƒë·ªông t√¨m file .env

def detect_intent_texts(project_id, session_id, text, language_code):
    """Returns the result of detect intent with texts as inputs.

    Using the same `session_id` between requests allows continuation
    of the conversation."""
    try:
        # The SessionsClient will automatically use the credentials
        # from the GOOGLE_APPLICATION_CREDENTIALS environment variable
        session_client = dialogflow.SessionsClient()
        session = session_client.session_path(project_id, session_id)

        text_input = dialogflow.TextInput(text=text, language_code=language_code)
        query_input = dialogflow.QueryInput(text=text_input)

        response = session_client.detect_intent(
            request={"session": session, "query_input": query_input}
        )

        return response.query_result.fulfillment_text
    except Exception as e:
        st.error(f"L·ªói khi k·∫øt n·ªëi t·ªõi Dialogflow: {e}")
        print(f"Dialogflow Error: {e}") # For server-side logging/debugging
        return "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë khi k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau."

# ƒë·ªçc data"
data = pd.read_csv("./googl_daily_prices.csv")
# --- C·∫•u h√¨nh trang (Lu√¥n ƒë·∫∑t ·ªü ƒë·∫ßu file) ---
st.set_page_config(
    page_title="Stock Predictor & Chatbot",
    page_icon="üìàü§ñ",
    layout="wide", # S·ª≠ d·ª•ng layout wide ƒë·ªÉ 2 c·ªôt hi·ªÉn th·ªã t·ªët h∆°n
    initial_sidebar_state="expanded"
)

st.title("·ª®ng d·ª•ng D·ª± ƒëo√°n Gi√° C·ªï phi·∫øu & Chatbot")

# --- Chia giao di·ªán th√†nh 2 c·ªôt ---
col1, col2 = st.columns([3, 2]) # T·ª∑ l·ªá 3:2, c·ªôt tr√°i r·ªông h∆°n c·ªôt ph·∫£i

# --- C·ªôt tr√°i: D·ª± ƒëo√°n Gi√° C·ªï phi·∫øu ---
with col1:
    st.header("üìà D·ª± ƒëo√°n Gi√° C·ªï phi·∫øu")

    st.markdown(
        """
        <div style="background-color:#A0AEC0 ; padding:10px; border-radius:5px; margin-bottom:15px;">
            Ch√†o m·ª´ng ƒë·∫øn v·ªõi c√¥ng c·ª• ph√¢n t√≠ch gi√° c·ªï phi·∫øu!
            <br>Nh·∫≠p m√£ c·ªï phi·∫øu b·∫°n mu·ªën xem (v√≠ d·ª•: AAPL, MSFT, GOOG).
            <br>B·∫°n c√≥ th·ªÉ ch·ªçn kho·∫£ng th·ªùi gian ƒë·ªÉ xem d·ªØ li·ªáu l·ªãch s·ª≠.
        </div>
        """, unsafe_allow_html=True
    )

    # Input cho m√£ c·ªï phi·∫øu

    # Input cho m√£ c·ªï phi·∫øu
    ticker = st.text_input("Nh·∫≠p M√£ C·ªï phi·∫øu (v√≠ d·ª•: GOOGLE)", "GOOGLE").upper()

    # Input cho kho·∫£ng th·ªùi gian
    today = datetime.now().date()
    start_date = datetime.combine(st.date_input("Ng√†y b·∫Øt ƒë·∫ßu", today - timedelta(days=365)), datetime.min.time())
    end_date = datetime.combine(st.date_input("Ng√†y k·∫øt th√∫c", today), datetime.max.time())

    # Ki·ªÉm tra ng√†y h·ª£p l·ªá
    if start_date > end_date:
        st.error("Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l·ªõn h∆°n ng√†y k·∫øt th√∫c.")
    else:
        try:
            # x·ª≠ l√Ω ng√†y
            data["date"] = pd.to_datetime(data["date"])
            # L·ªçc d·ªØ li·ªáu d·ª±a tr√™n ng√†y ƒë∆∞·ª£c ch·ªçn
            filtered_data = data[(data['date'] >= start_date) & (data['date'] <= end_date)]    

            if not filtered_data.empty:
                # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n
                st.subheader(f"Bi·ªÉu ƒë·ªì Gi√° C·ªï phi·∫øu c·ªßa {ticker}")
                st.write(f"Kh·ªëi l∆∞·ª£ng giao d·ªãch trung b√¨nh trong kho·∫£ng th·ªùi gian: {filtered_data['5. volume'].mean():,.0f} c·ªï phi·∫øu")
                st.metric(label=f"Gi√° ƒë√≥ng c·ª≠a g·∫ßn nh·∫•t c·ªßa {ticker}", value=f"${filtered_data['4. close'].iloc[-1]:.2f}")
                
                # T·∫°o bi·ªÉu ƒë·ªì n·∫øn (Candlestick chart)
                fig = go.Figure(data=[go.Candlestick(x=filtered_data['date'],
                                                    open=filtered_data['1. open'],
                                                    high=filtered_data['2. high'],
                                                    low=filtered_data['3. low'],
                                                    close=filtered_data['4. close'],
                                                   )])
                                            

                fig.update_layout(
                    title_text=f'{ticker} Bi·ªÉu ƒë·ªì Gi√° C·ªï phi·∫øu',
                    xaxis_rangeslider_visible=False,
                    xaxis_title="Ng√†y",
                    yaxis_title="Gi√°",
                    height=500  # Chi·ªÅu cao c·ªßa bi·ªÉu ƒë·ªì
                )
                st.plotly_chart(fig, use_container_width=True)

                        # --- PH·∫¶N D·ª∞ ƒêO√ÅN ---
                st.subheader("D·ª± ƒëo√°n Kh·ªëi l∆∞·ª£ng Giao d·ªãch Ng√†y Ti·∫øp Theo")
                st.markdown( # CSS
                    """
                    <style>
                    .prediction-box { /* ... CSS c·ªßa b·∫°n ... */ }
                    </style>
                    """, unsafe_allow_html=True
                )

                # Ki·ªÉm tra xem model v√† df t·ª´ model.py c√≥ s·∫µn kh√¥ng
                if m.model is None:
                    st.error("M√¥ h√¨nh d·ª± ƒëo√°n (m.model) kh√¥ng kh·∫£ d·ª•ng. "
                            "Vui l√≤ng ki·ªÉm tra console ƒë·ªÉ xem l·ªói chi ti·∫øt t·ª´ model.py.")
                elif m.df.empty: # m.df l√† DataFrame ƒë√£ ti·ªÅn x·ª≠ l√Ω trong model.py
                    st.error("D·ªØ li·ªáu ƒë√£ ti·ªÅn x·ª≠ l√Ω (m.df) r·ªóng. "
                            "Vui l√≤ng ki·ªÉm tra console ƒë·ªÉ xem l·ªói chi ti·∫øt t·ª´ model.py.")
                else:
                    # Date input cho d·ª± ƒëo√°n (s·ª≠ d·ª•ng index c·ªßa m.df)
                    min_pred_date = m.df.index.min().date()
                    max_pred_date = m.df.index.max().date()

                    # Ng√†y m·∫∑c ƒë·ªãnh: ng√†y k·∫ø cu·ªëi trong m.df ƒë·ªÉ c√≥ th·ªÉ c√≥ actual cho ng√†y cu·ªëi
                    default_pred_date = m.df.index[-2].date() if len(m.df.index) >= 2 else max_pred_date

                    input_prediction_date = st.date_input(
                        "Ch·ªçn ng√†y ƒë·ªÉ l·∫•y d·ªØ li·ªáu d·ª± ƒëo√°n cho ng√†y ti·∫øp theo",
                        value=default_pred_date,
                        min_value=min_pred_date,
                        max_value=max_pred_date,
                        help=(f"D·ªØ li·ªáu ƒë·∫∑c tr∆∞ng s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ ng√†y b·∫°n ch·ªçn. "
                            f"Ng√†y h·ª£p l·ªá trong t·∫≠p ƒë√£ x·ª≠ l√Ω: {min_pred_date.strftime('%d/%m/%Y')} "
                            f"ƒë·∫øn {max_pred_date.strftime('%d/%m/%Y')}.")
                    )

                    if st.button("Th·ª±c hi·ªán D·ª± ƒëo√°n Volume", key="predict_button"):
                        if input_prediction_date:
                            st.write(f"ƒêang d·ª± ƒëo√°n cho ng√†y sau ng√†y: {input_prediction_date.strftime('%Y-%m-%d')}")
                            st.write(f"S·ª≠ d·ª•ng m.df c√≥ index t·ª´ {m.df.index.min().date()} ƒë·∫øn {m.df.index.max().date()}")

                            predictions_result = m.predict_next_day_volume(input_prediction_date, m.df)

                            if isinstance(predictions_result, dict):
                                # ... (Ph·∫ßn hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n gi·ªØ nguy√™n) ...
                                actual_volume_text = ""
                                if predictions_result.get('actual_next_day_volume') is not None:
                                    actual_volume_text = (f"<p>Volume th·ª±c t·∫ø c·ªßa ng√†y {predictions_result['predicted_for_date']}: "
                                                        f"<b>{predictions_result['actual_next_day_volume']:,.0f}</b></p>")
                                else:
                                    actual_volume_text = f"<p>Kh√¥ng c√≥ d·ªØ li·ªáu volume th·ª±c t·∫ø cho ng√†y {predictions_result['predicted_for_date']} ƒë·ªÉ so s√°nh.</p>"

                                st.markdown(
                                    f"""
                                    <div class="prediction-box" style="background-color: #A0AEC0; border: 1px solid #CBD5E0; padding: 20px; border-radius: 8px; font-size: 17px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                                        <p style="margin-bottom: 8px;"><b style="color: #2B6CB0;">K·∫øt qu·∫£ d·ª± ƒëo√°n kh·ªëi l∆∞·ª£ng giao d·ªãch:</b></p>
                                        <p style="margin-bottom: 8px;">S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ ng√†y: <b style="color: #2B6CB0;">{predictions_result['selected_date_for_features']}</b></p>
                                        <p style="margin-bottom: 8px;">Volume d·ª± ƒëo√°n cho ng√†y <b style="color: #2B6CB0;">{predictions_result['predicted_for_date']}</b>: <b style='color: green; font-size: 20px;'>{predictions_result['predicted_next_day_volume']:,.0f}</b></p>
                                        {actual_volume_text}
                                    </div>
                                    """, unsafe_allow_html=True
                                )
                            else: # predictions_result l√† chu·ªói l·ªói
                                st.error(f"L·ªói t·ª´ h√†m d·ª± ƒëo√°n: {predictions_result}")
                        else:
                            st.warning("Vui l√≤ng ch·ªçn m·ªôt ng√†y ƒë·ªÉ d·ª± ƒëo√°n.")

            else:
                st.warning(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ c·ªï phi·∫øu '{ticker}' trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.")

        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu ho·∫∑c hi·ªÉn th·ªã: {e}")
            st.info("Vui l√≤ng ki·ªÉm tra l·∫°i m√£ c·ªï phi·∫øu ho·∫∑c k·∫øt n·ªëi internet c·ªßa b·∫°n.")


# --- C·ªôt ph·∫£i: Chatbot ---

with col2:
    st.header("ü§ñ Chatbot H·ªó tr·ª£ (Dialogflow)")

    st.markdown(
        """
        <div style="background-color:#A0AEC0 ; padding:10px; border-radius:5px; margin-bottom:15px;">
            Ch√†o b·∫°n! H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨.
        </div>
        """, unsafe_allow_html=True
    )

    # Kh·ªüi t·∫°o l·ªãch s·ª≠ tin nh·∫Øn v√† session_id cho Dialogflow
    if "messages" not in st.session_state:
        st.session_state.messages = []
        # Tin nh·∫Øn ch√†o m·ª´ng ban ƒë·∫ßu t·ª´ chatbot (c√≥ th·ªÉ l·∫•y t·ª´ Welcome Intent c·ªßa Dialogflow)
        # st.session_state.messages.append({"role": "assistant", "content": "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?"})

    if "dialogflow_session_id" not in st.session_state:
        st.session_state.dialogflow_session_id = str(uuid.uuid4()) # T·∫°o session ID duy nh·∫•t cho m·ªói ng∆∞·ªùi d√πng/phi√™n

    # Hi·ªÉn th·ªã c√°c tin nh·∫Øn c≈©
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # Khung nh·∫≠p li·ªáu cho chatbot
    prompt = st.chat_input("G√µ tin nh·∫Øn c·ªßa b·∫°n ·ªü ƒë√¢y...")

    if prompt:
        # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # L·∫•y ph·∫£n h·ªìi t·ª´ Dialogflow
        with st.chat_message("assistant"):
            with st.spinner("Bot ƒëang suy nghƒ©..."): # Hi·ªáu ·ª©ng ch·ªù
                response = detect_intent_texts(
                os.getenv("PROJECT_ID"),  # Project ID c·ªßa b·∫°n
                st.session_state.dialogflow_session_id,
                prompt,
                os.getenv("LANGUAGE_CODE") # LANGUAGE_CODE
            )
       
            st.markdown(response)
            # Th√™m ph·∫£n h·ªìi c·ªßa chatbot v√†o l·ªãch s·ª≠
            st.session_state.messages.append({"role": "assistant", "content": response})

